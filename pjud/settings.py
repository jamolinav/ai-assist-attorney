"""
Django settings for pjud project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^f@u)9sp(vc0ogca^j7k92(*hms$h8o2hxe0ur@(z*&ba9)77k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "True").strip().lower() in ("true", "1", "yes", "on")

ALLOWED_HOSTS = ["localhost", "127.0.0.1", os.environ.get("ALLOWED_HOSTS", "*")]
CSRF_TRUSTED_ORIGINS = [os.environ.get("CSRF_TRUSTED_ORIGINS", "*")]

APPEND_SLASH = True
WEBSITE_SITE_NAME = os.environ.get('WEBSITE_SITE_NAME', '')

# Application definition

INSTALLED_APPS = [
    'causas_app',
    #'chatbot_app',
    'chatbot',
    'mcp_app',
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pjud.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pjud.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES_EXTRACTOR = os.environ.get("DATABASES", None)

if DATABASES_EXTRACTOR:
    DATABASES = json.loads(DATABASES_EXTRACTOR)
else:
    SQL_ENGINE = os.environ.get("SQL_ENGINE", "sqlite")

    if 'sqlite' in SQL_ENGINE:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': os.environ.get("BASE_DIR_SQLITE", BASE_DIR / 'db.sqlite3'),
            }
        }
    elif 'mssql' in SQL_ENGINE:
        DATABASES = {
            'default': {
                'ENGINE': 'mssql',
                "NAME": os.environ.get("SQL_DATABASE", "extractor-manager"),
                "USER": os.environ.get("SQL_USER", "extractor-sa"),
                "PASSWORD": os.environ.get("SQL_PASSWORD", ""),
                "HOST": os.environ.get("SQL_HOST", ""),
                "PORT": os.environ.get("SQL_PORT", "1433"),
                "OPTIONS": {
                    'driver': 'ODBC Driver 17 for SQL Server',
                    'host_is_server': True,
                    'timeout': 60,
                    'login_timeout': 60,
                },
            }
        }
    elif 'postgresql' in SQL_ENGINE:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                "NAME": os.environ.get("SQL_DATABASE", "extractorprod"),
                "USER": os.environ.get("SQL_USER", "extractorprod"),
                "PASSWORD": os.environ.get("SQL_PASSWORD", ""),
                "HOST": os.environ.get("SQL_HOST", ""),
                "PORT": os.environ.get("SQL_PORT", "5432"),
            }
        }
    elif 'mysql' in SQL_ENGINE:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                "NAME": os.environ.get("SQL_DATABASE", "extractorprod"),
                "USER": os.environ.get("SQL_USER", "extractorprod"),
                "PASSWORD": os.environ.get("SQL_PASSWORD", ""),
                "HOST": os.environ.get("SQL_HOST", ""),
                "PORT": os.environ.get("SQL_PORT", "3306"),
            }
        }
    elif 'oracle' in SQL_ENGINE:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.oracle',
                "NAME": os.environ.get("SQL_DATABASE", "extractorprod"),
                "USER": os.environ.get("SQL_USER", "extractorprod"),
                "PASSWORD": os.environ.get("SQL_PASSWORD", ""),
                "HOST": os.environ.get("SQL_HOST", ""),
                "PORT": os.environ.get("SQL_PORT", "1521"),
            }
        }
    else:
        raise ValueError(f"Unsupported SQL_ENGINE: {SQL_ENGINE}. Supported engines are: sqlite, mssql, postgresql, mysql, oracle.")



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "static/")
STATIC_URL = '/home/site/wwwroot/static/'

#STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGOUT_REDIRECT_URL = '/chatbot/chat/'

PJUD_VERSION = 'v1.1.2'

# EMAIL_BACKEND
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# crea carpeta logs sino existe 
if not os.path.exists(BASE_DIR / 'logs'):
    os.makedirs(BASE_DIR / 'logs')

LOGS_DIR = BASE_DIR / 'logs'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{asctime} [{levelname}] - [" + PJUD_VERSION + "]; {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "causas_app": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "causas_app.log",
            "maxBytes": 1024 * 1024 * 10,
            "backupCount": 10,
            "formatter": "verbose",
        },
        "chatbot_app": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "chatbot_app.log",
            "maxBytes": 1024 * 1024 * 10,
            "backupCount": 10,
            "formatter": "verbose",
        },
        "mcp_app": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "mcp_app.log",
            "maxBytes": 1024 * 1024 * 10,
            "backupCount": 10,
            "formatter": "verbose",
        },
    },
    # The rest of the LOGGING configuration...
    "loggers": {
        "causas_app": {
            "handlers": ["causas_app"],
            "level": "DEBUG",
            "propagate": True,
        },
        "chatbot_app": {
            "handlers": ["chatbot_app"],
            "level": "DEBUG",
            "propagate": True,
        },
        "mcp_app": {
            "handlers": ["mcp_app"],
            "level": "DEBUG",
            "propagate": True,
        },
    }
}
